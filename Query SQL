Analyzing eCommerce Business Performance with SQL



TASK 1

Subtask 1:
Membuat database baru beserta tabel-tabelnya untuk data yang sudah disiapkan

Membuat tabel dari 8 data csv
query untuk membuat tabelnya

create table customers (
	customer_id varchar(250),
	customer_unique_id varchar(250),
	customer_zip_code_prefix int,
	customer_city varchar(250),
	customer_state varchar(250)
);

create table geolocation (
	geo_zip_code_prefix varchar(250),
	geo_lat varchar(250),
	geo_lng varchar(250),
	geo_city varchar(250),
	geo_state varchar(250)
);

create table order_item (
	order_id varchar(250),
	order_item_id int,
	product_id varchar(250),
	seller_id varchar(250),
	shipping_limit_date timestamp,
	price float,
	freight_value float
);

create table payments (
	order_id varchar(250),
	payment_sequential int,
	payment_type varchar(250),
	payment_installment int,
	payment_value float
);


create table reviews (
	review_id varchar(250),
	order_id varchar(250),
	review_score int, 
	review_comment_title varchar(250),
	review_comment_message text,
	review_creation_date timestamp,
	review_answer timestamp
);

create table orders (
	order_id varchar(250),
	customers_id varchar(250),
	order_status varchar(250),
	order_purchase_timestamp timestamp,
	order_approved_at timestamp,
	order_delivered_carrier_date timestamp,
	order_delivered_customer_date timestamp,
	order_estimated_delivered_date timestamp
);

create table products (
	product_id varchar(250),
	product_category_name varchar(250),
	product_name_length int,
	product_description_length int,
	product_photos_qty int,
	product_weight_g int,
	product_length_cm int,
	product_height_cm int,
	product_width_cm int
);

create table sellers (
	seller_id varchar(250),
	seller_zip_code int,
	seller_city varchar(250),
	seller_state varchar(250)
);






Subtask 2:
Import CSV ke dalam database

Untuk mengimport file csv saya menggunakan fitur yang tersedia di PostgreSQL
yaitu dengan klik kanan pada tabel yang sudah dibuat sebelumnya lalu pilih import/export data




Subtask 3:
Membuat entity relationship antar tabel, Entity Relationship Diagram (ERD)
Untuk menambahkan foreign key, klik constraint dan add table yang ingin dijadikan foreign key, kemudian pilih save.

Berikut adalah primary key per table:
Customer â€“ Primary Key: customer_id
Geolocation â€“ Primary Key: geolocation_zip_code_prefix
Order_items â€“ Primary Key: order_id
Order_payments â€“ Primary Key: order_id
Order_reviews â€“ Primary Key: tidak ada 
Orders â€“ Primary Key: order_id
Product â€“ Primary Key: product_id
Seller â€“ Primary Key: seller_id



Untuk membuat ERD juga saya menggunakan fitur yang tersedia di PostgreSQL dengan cara klik kanan pada database yang ingin dibuat ERD, lalu pilih ERD Database






TASK 2

Subtask 1:
Rata-rata Monthly Active User (MAU) per tahun

select
    year, 
    round(avg(mau), 2) AS average_mau
from (
    select
        date_part('year', o.order_purchase_timestamp) AS year,
        date_part('month', o.order_purchase_timestamp) AS month,
        count(distinct  c.customer_unique_id) AS mau
    from orders  o 
    join customers  c on o.customers_id = c.customer_id
    group by  1, 2
) subq
group by 1;






Subtask 2:
Total customer baru per tahun

select 
	date_part('year', first_purchase_time) as year,
	count(1) as new_customers
from (
	select 
		c.customer_unique_id,
		min(o.order_purchase_timestamp) as first_purchase_time
	from orders o 
	join customers c on c.customer_id = o.customers_id
	group by 1
) subq
group by 1


Subtask 3:
jumlah customer yang melakukan repeat order per tahun

select 
	year, 
	count(distinct customer_unique_id) as repeating_customers
from (
	select 
		date_part('year', o.order_purchase_timestamp) as year,
		c.customer_unique_id,
		count(1) as purchase_frequency
	from orders o 
	join customers c on c.customer_id = o.customers_id
	group by 1, 2
	having count(1) > 1
) subq
group by 1


Subtask 4:
rata-rata frekuensi order untuk setiap tahun

select 
	year, 
	round(avg(frequency_purchase),3) as avg_orders_per_customers 
from (
	select 
		date_part('year', o.order_purchase_timestamp) as year,
		c.customer_unique_id,
		count(1) as frequency_purchase
	from orders o 
	join customers c on c.customer_id = o.customers_id
	group by 1, 2
) a
group by 1

Subtask 5:
Menggabungkan ketiga metriks

with 
kal_mau as (
select 
	year, 
	round(avg(mau), 2) as average_mau
from
(
	select 
		date_part('year', o.order_purchase_timestamp) as year,
		date_part('month', o.order_purchase_timestamp) as month,
		count(distinct c.customer_unique_id) as mau
	from orders o 
	join customers c on o.customers_id = c.customer_id
	group by 1,2 
) subq
group by 1
),
kal_newcust as (
select 
	date_part('year', first_purchase_time) as year,
	count(1) as new_customers
from 
(
	select 
		c.customer_unique_id,
		min(o.order_purchase_timestamp) as first_purchase_time
	from orders o 
	join customers c on c.customer_id = o.customers_id
	group by 1
) subq
group by 1
),
kal_repeat as (
select 
	year, 
	count(distinct customer_unique_id) as repeating_customers
from 
(
	select 
		date_part('year', o.order_purchase_timestamp) as year,
		c.customer_unique_id,
		count(1) as purchase_frequency
	from orders o 
	join customers c on c.customer_id = o.customers_id
	group by 1, 2
	having count(1) > 1
) subq
group by 1 
),
kal_avg_fre as (
select 
	year, 
	round(avg(frequency_purchase),3) as avg_orders_per_customers 
from 
(
	select 
		date_part('year', o.order_purchase_timestamp) as year,
		c.customer_unique_id,
		count(1) as frequency_purchase
	from orders o 
	join customers c on c.customer_id = o.customers_id
	group by 1, 2
) a
group by 1
)

select 
	mau.year, 
	mau.average_mau, 
	newc.new_customers,
	rep.repeating_customers, 
	freq.avg_orders_per_customers
from kal_mau mau 
join kal_newcust newc on mau.year = newc.year
join kal_repeat rep on rep.year = mau.year
join kal_avg_fre freq on freq.year = mau.year



TASK 3
Subtask 1:
Membuat tabel informasi revenue per tahun
create table total_revenue_per_year as
select 
	date_part('year', o.order_purchase_timestamp) as year,
	sum(revenue_per_order) as revenue
from (
	select 
		order_id, 
		sum(price+freight_value) as revenue_per_order
	from order_items
	group by 1
) subq
join orders o on subq.order_id = o.order_id
where o.order_status = 'delivered'
group by 1

Subtask 2:
Membuat tabel jumlah cancel order per tahun

create table total_cancel_per_year as 
select 
	date_part('year', order_purchase_timestamp) as year,
	count(1) as num_canceled_orders
from orders
where order_status = 'canceled'
group by 1

Subtask 3:
top kategori yang menghasilkan revenue terbesar per tahun
create table top_product_category_by_revenue_per_year as 
select 
	year, 
	product_category_name, 
	revenue 
from (
select 
	date_part('year', o.order_purchase_timestamp) as year,
	p.product_category_name,
	sum(oi.price + oi.freight_value) as revenue,
	rank() over(partition by 
date_part('year', o.order_purchase_timestamp) 
 order by 
sum(oi.price + oi.freight_value) desc) as rk
from order_item oi
join orders o on o.order_id = oi.order_id
join products p on p.product_id = oi.product_id
where o.order_status = 'delivered'
group by 1,2) sq
where rk = 1

Subtask 4:
kategori yang mengalami cancel order terbanyak per tahun
create table most_canceled_product_category_per_year as 
select 
	year, 
	product_category_name, 
	num_canceled 
from (
select 
	date_part('year', o.order_purchase_timestamp) as year,
	p.product_category_name,
	count(1) as num_canceled,
	rank() over(partition by 
date_part('year', o.order_purchase_timestamp) 
			 order by count(1) desc) as rk
from order_item oi
join orders o on o.order_id = oi.order_id
join products p on p.product_id = oi.product_id
where o.order_status = 'canceled'
group by 1,2) sq
where rk = 1

Subtask 5:
Menggabungkan semua informasi dari semua tabel ke dalam satu tabel
select 
	a.year,
	a.product_category_name as top_product_category_by_revenue,
	a.revenue as category_revenue,
	b.revenue as year_total_revenue,
	c.product_category_name as most_canceled_product_category,
	c.num_canceled as category_num_canceled,
	d.num_canceled_orders as year_total_num_canceled
from top_product_category_by_revenue_per_year a
join total_revenue_per_year b on a.year = b.year 
join most_canceled_product_category_per_year c on a.year = c.year 
join total_cancel_per_year d on d.year = a.year
TASK 4
Subtask 1:
tabel yang berisi informasi jumlah penggunaan masing-masing tipe pembayaran untuk setiap tahun
with 
tmp as (
select 
	date_part('year', o.order_purchase_timestamp) as year,
	op.payment_type,
	count(1) as num_used
from payments op 
join orders o on o.order_id = op.order_id
group by 1, 2
) 

select *,
	case when year_2017 = 0 then NULL
		else round((year_2018 - year_2017) / year_2017, 2)
	end as pc_2017_2018
from (
select 
  payment_type,
  sum(case when year = '2016' then num_used else 0 end) as year_2016,
  sum(case when year = '2017' then num_used else 0 end) as year_2017,
  sum(case when year = '2018' then num_used else 0 end) as year_2018
from tmp 
group by 1) subq
order by 5 desc



Terima kasih ðŸ™‚
